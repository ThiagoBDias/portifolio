import { config } from 'dotenv';

// Carregar vari√°veis de ambiente
config();

import { createClient } from '@supabase/supabase-js';

// Testar conectividade com Supabase (para debug no Vercel)
const supabaseUrl = process.env.SUPABASE_URL || process.env.PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.SUPABASE_ANON_KEY || process.env.PUBLIC_SUPABASE_ANON_KEY;

console.log('üîç Debug Supabase Connection:');
console.log('SUPABASE_URL:', supabaseUrl ? '‚úÖ Definido' : '‚ùå N√£o definido');
console.log('SUPABASE_ANON_KEY:', supabaseAnonKey ? '‚úÖ Definido' : '‚ùå N√£o definido');

if (!supabaseUrl || !supabaseAnonKey) {
    console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
    console.log('Vari√°veis dispon√≠veis:', Object.keys(process.env).filter(key => key.includes('SUPABASE')));
    process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testConnection() {
    try {
        console.log('üîó Testando conex√£o com Supabase...');

        // Teste b√°sico de conectividade
        const { data: testData, error: testError } = await supabase
            .from('projects')
            .select('count')
            .limit(1);

        if (testError) {
            console.error('‚ùå Erro na conex√£o:', testError.message);
            console.error('C√≥digo do erro:', testError.code);
            return false;
        }

        console.log('‚úÖ Conex√£o com Supabase estabelecida!');

        // Teste de leitura de projetos publicados
        console.log('üìñ Testando leitura de projetos publicados...');
        const { data: projects, error: projectsError } = await supabase
            .from('projects')
            .select('*')
            .eq('status', 'published')
            .order('published_at', { ascending: false });

        if (projectsError) {
            console.error('‚ùå Erro ao ler projetos:', projectsError.message);
            console.error('C√≥digo do erro:', projectsError.code);
            return false;
        }

        console.log(`üìä Projetos publicados encontrados: ${projects?.length || 0}`);

        // Teste de autentica√ß√£o
        console.log('üîê Testando autentica√ß√£o...');
        const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
            email: 'admin@portifolio.com',
            password: 'admin123456'
        });

        if (authError) {
            console.error('‚ùå Erro na autentica√ß√£o:', authError.message);
            return false;
        }

        console.log('‚úÖ Autentica√ß√£o bem-sucedida!');

        // Teste de cria√ß√£o de projeto
        console.log('üìù Testando cria√ß√£o de projeto...');
        const testProject = {
            title: 'Projeto de Teste - Vercel',
            description: 'Projeto criado para testar deploy no Vercel',
            technologies: ['JavaScript', 'Vercel'],
            demo_link: 'https://example.com',
            github_link: 'https://github.com/example',
            status: 'published',
            published_at: new Date().toISOString()
        };

        const { data: createdProject, error: createError } = await supabase
            .from('projects')
            .insert([testProject])
            .select();

        if (createError) {
            console.error('‚ùå Erro ao criar projeto:', createError.message);
            console.error('C√≥digo do erro:', createError.code);
            return false;
        }

        console.log('‚úÖ Projeto criado com sucesso!');
        console.log('ID do projeto:', createdProject?.[0]?.id);

        return true;

    } catch (error) {
        console.error('‚ùå Erro geral:', error.message);
        console.error('Stack:', error.stack);
        return false;
    }
}

testConnection();
