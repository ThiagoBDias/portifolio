// Funções auxiliares para o painel de administração

// Formatar data para exibição
function formatDate(dateString) {
    if (!dateString) return 'Data desconhecida';
    
    const date = new Date(dateString);
    return date.toLocaleDateString('pt-BR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
    });
}

// Modal para visualizar imagem em tamanho maior
function showImageModal(imageUrl, altText) {
    // Criar modal container
    const modalContainer = document.createElement('div');
    modalContainer.className = 'image-modal-container';
    
    // Criar modal
    const modal = document.createElement('div');
    modal.className = 'image-modal';
    
    // Adicionar imagem
    const img = document.createElement('img');
    img.src = imageUrl;
    img.alt = altText || 'Imagem do post';
    
    // Adicionar botões
    const actionsDiv = document.createElement('div');
    actionsDiv.className = 'image-modal-actions';
    
    // Botão de fechar
    const closeBtn = document.createElement('button');
    closeBtn.className = 'btn btn-danger';
    closeBtn.innerHTML = '<i class="fas fa-times"></i> Fechar';
    closeBtn.addEventListener('click', () => {
        document.body.removeChild(modalContainer);
    });
    
    // Botão para abrir em nova aba
    const openBtn = document.createElement('button');
    openBtn.className = 'btn btn-primary';
    openBtn.innerHTML = '<i class="fas fa-external-link-alt"></i> Abrir em nova aba';
    openBtn.addEventListener('click', () => {
        window.open(imageUrl, '_blank');
    });
    
    // Adicionar botões ao container de ações
    actionsDiv.appendChild(openBtn);
    actionsDiv.appendChild(closeBtn);
    
    // Montar modal
    modal.appendChild(img);
    modal.appendChild(actionsDiv);
    modalContainer.appendChild(modal);
    
    // Adicionar ao body
    document.body.appendChild(modalContainer);
    
    // Fechar modal ao clicar fora
    modalContainer.addEventListener('click', (e) => {
        if (e.target === modalContainer) {
            document.body.removeChild(modalContainer);
        }
    });
}

// Função para mostrar notificações toast
function showToast(message, type = 'info') {
    // Remover toast existente
    const existingToast = document.querySelector('.toast-notification');
    if (existingToast) {
        document.body.removeChild(existingToast);
    }
    
    // Criar novo toast
    const toast = document.createElement('div');
    toast.className = `toast-notification ${type}`;
    toast.textContent = message;
    
    // Adicionar toast ao body
    document.body.appendChild(toast);
    
    // Animar entrada
    setTimeout(() => {
        toast.classList.add('show');
    }, 10);
    
    // Remover após 3 segundos
    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => {
            if (document.body.contains(toast)) {
                document.body.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// Alternar status do post (publicado/rascunho)
async function togglePostStatus(postId, newStatus) {
    if (!postId) {
        showToast('ID do post inválido', 'error');
        return;
    }
    
    try {
        showLoading();
        
        const updateData = {
            status: newStatus
        };
        
        // Adicionar ou remover data de publicação
        if (newStatus === 'published') {
            updateData.published_at = new Date().toISOString();
        }
        
        const { data, error } = await supabaseClient
            .from('posts')
            .update(updateData)
            .eq('id', postId);
            
        if (error) {
            throw error;
        }
        
        showToast(`Post ${newStatus === 'published' ? 'publicado' : 'despublicado'} com sucesso!`, 'success');
        loadPosts(); // Recarregar a lista
    } catch (error) {
        console.error('Erro ao alterar status do post:', error);
        showToast(`Erro ao alterar status: ${error.message}`, 'error');
    } finally {
        hideLoading();
    }
}

// Pré-visualizar post
function previewPost(post) {
    // Criar modal para pré-visualização
    const modalContainer = document.createElement('div');
    modalContainer.className = 'preview-modal-container';
    
    const modal = document.createElement('div');
    modal.className = 'preview-modal';
    
    // Cabeçalho do modal
    const header = document.createElement('div');
    header.className = 'preview-modal-header';
    header.innerHTML = `
        <h2>Pré-visualização: ${post.title}</h2>
        <button class="close-preview-btn"><i class="fas fa-times"></i></button>
    `;
    
    // Conteúdo do post
    const content = document.createElement('div');
    content.className = 'preview-modal-content';
    
    // Adicionar imagem de capa se existir
    if (post.coverImage) {
        const coverImg = document.createElement('div');
        coverImg.className = 'preview-cover-image';
        coverImg.style.backgroundImage = `url(${post.coverImage})`;
        content.appendChild(coverImg);
    }
    
    // Adicionar título e meta dados
    const postHeader = document.createElement('div');
    postHeader.className = 'preview-post-header';
    postHeader.innerHTML = `
        <h1>${post.title}</h1>
        <div class="preview-post-meta">
            <span>${formatDate(post.created_at)}</span>
        </div>
    `;
    content.appendChild(postHeader);
    
    // Adicionar conteúdo
    const postContent = document.createElement('div');
    postContent.className = 'preview-post-content markdown-body';
    
    // Converter markdown para HTML usando a biblioteca marked
    if (typeof marked !== 'undefined') {
        postContent.innerHTML = marked.parse(post.content || '');
    } else {
        // Fallback se marked não estiver disponível
        postContent.innerHTML = `<pre>${post.content || ''}</pre>`;
    }
    
    content.appendChild(postContent);
    
    // Montar modal
    modal.appendChild(header);
    modal.appendChild(content);
    modalContainer.appendChild(modal);
    
    // Adicionar ao body
    document.body.appendChild(modalContainer);
    
    // Event listeners
    const closeBtn = header.querySelector('.close-preview-btn');
    closeBtn.addEventListener('click', () => {
        document.body.removeChild(modalContainer);
    });
    
    // Fechar ao clicar fora
    modalContainer.addEventListener('click', (e) => {
        if (e.target === modalContainer) {
            document.body.removeChild(modalContainer);
        }
    });
}

// Confirmar exclusão de post
function deletePost(postId, postTitle) {
    if (!postId) {
        showToast('ID do post inválido', 'error');
        return;
    }
    
    // Criar modal de confirmação
    const modalContainer = document.createElement('div');
    modalContainer.className = 'confirm-modal-container';
    
    const modal = document.createElement('div');
    modal.className = 'confirm-modal';
    
    modal.innerHTML = `
        <div class="confirm-modal-header">
            <h3>Confirmar exclusão</h3>
        </div>
        <div class="confirm-modal-body">
            <p>Tem certeza que deseja excluir o post <strong>"${postTitle || 'Sem título'}"</strong>?</p>
            <p class="warning-text">Esta ação não pode ser desfeita!</p>
        </div>
        <div class="confirm-modal-footer">
            <button class="btn btn-outline-secondary cancel-btn">Cancelar</button>
            <button class="btn btn-danger confirm-btn">Excluir</button>
        </div>
    `;
    
    modalContainer.appendChild(modal);
    document.body.appendChild(modalContainer);
    
    // Event listeners
    const cancelBtn = modal.querySelector('.cancel-btn');
    const confirmBtn = modal.querySelector('.confirm-btn');
    
    cancelBtn.addEventListener('click', () => {
        document.body.removeChild(modalContainer);
    });
    
    confirmBtn.addEventListener('click', async () => {
        try {
            showLoading();
            document.body.removeChild(modalContainer);
            
            const { error } = await supabaseClient
                .from('posts')
                .delete()
                .eq('id', postId);
                
            if (error) {
                throw error;
            }
            
            showToast('Post excluído com sucesso!', 'success');
            loadPosts(); // Recarregar a lista
        } catch (error) {
            console.error('Erro ao excluir post:', error);
            showToast(`Erro ao excluir post: ${error.message}`, 'error');
        } finally {
            hideLoading();
        }
    });
    
    // Fechar ao clicar fora
    modalContainer.addEventListener('click', (e) => {
        if (e.target === modalContainer) {
            document.body.removeChild(modalContainer);
        }
    });
}
