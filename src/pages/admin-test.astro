---
// P√°gina de teste do admin migrada para Supabase
---

<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Test - Supabase</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            background: #f5f5f5; 
        }
        .test-container { 
            max-width: 800px; 
            margin: 0 auto; 
            background: white; 
            padding: 20px; 
            border-radius: 10px; 
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .status-box { 
            padding: 15px; 
            margin: 10px 0; 
            border-radius: 5px; 
            border-left: 4px solid;
        }
        .status-success { 
            background: #d4edda; 
            border-color: #28a745; 
            color: #155724;
        }
        .status-error { 
            background: #f8d7da; 
            border-color: #dc3545; 
            color: #721c24;
        }
        .status-info { 
            background: #d1ecf1; 
            border-color: #17a2b8; 
            color: #0c5460;
        }
        .btn { 
            background: #007bff; 
            color: white; 
            padding: 10px 20px; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer; 
            margin: 5px;
        }
        .btn:hover { background: #0056b3; }
        pre { 
            background: #f8f9fa; 
            padding: 15px; 
            border-radius: 5px; 
            overflow-x: auto; 
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #007bff;
        }
        .test-section {
            margin: 20px 0;
            padding: 20px;
            border: 1px solid #dee2e6;
            border-radius: 5px;
        }
    </style>
</head>
<body>
    <div class="test-container">
        <div class="header">
            <h1>üß™ Teste de Conectividade - Supabase</h1>
            <p>P√°gina de diagn√≥stico do sistema administrativo</p>
        </div>

        <div id="supabase-status" class="status-box status-info">
            <strong>Status:</strong> Verificando conex√£o com Supabase...
        </div>

        <div class="test-section">
            <h3>üîç Informa√ß√µes de Debug</h3>
            <div id="debug-info">
                <p>Carregando informa√ß√µes...</p>
            </div>
        </div>

        <div class="test-section">
            <h3>üîê Teste de Autentica√ß√£o</h3>
            <p>Use as credenciais padr√£o para testar o login:</p>
            <ul>
                <li><strong>Email:</strong> admin@italo.dev</li>
                <li><strong>Senha:</strong> Italo2025Admin!</li>
            </ul>
            <button class="btn" onclick="testLogin()">Testar Login</button>
            <button class="btn" onclick="testLogout()">Testar Logout</button>
            <div id="auth-result"></div>
        </div>

        <div class="test-section">
            <h3>üìä Teste de Database</h3>
            <button class="btn" onclick="testDatabase()">Testar Conex√£o BD</button>
            <button class="btn" onclick="loadTestData()">Carregar Dados de Teste</button>
            <div id="db-result"></div>
        </div>

        <div class="test-section">
            <h3>üöÄ Acesso ao Admin</h3>
            <p>Se os testes passaram, voc√™ pode acessar:</p>
            <a href="/admin/" class="btn">üîó Ir para Admin Dashboard</a>
        </div>
    </div>

    <!-- Supabase SDK -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    
    <script>
        console.log('üß™ Iniciando testes do Supabase...');
        
        // Configura√ß√£o do Supabase
        const SUPABASE_URL = 'https://nattvkjaecceirxthizc.supabase.co';
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5hdHR2a2phZWNjZWlyeHRoaXpjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTY5MjM2NTMsImV4cCI6MjA3MjQ5OTY1M30.K6Nfu5oGeoo6bZyToBNWkBdA1CncXEjWIrSydlMU2WQ';
        
        // Inicializar cliente
        let supabase;
        
        // Elementos DOM
        const statusDiv = document.getElementById('supabase-status');
        const debugInfo = document.getElementById('debug-info');
        const authResult = document.getElementById('auth-result');
        const dbResult = document.getElementById('db-result');
        
        function updateStatus(message, type = 'info') {
            statusDiv.className = `status-box status-${type}`;
            statusDiv.innerHTML = `<strong>Status:</strong> ${message}`;
            console.log(`[${type.toUpperCase()}] ${message}`);
        }
        
        function updateDebug(info) {
            debugInfo.innerHTML = `
                <pre>${JSON.stringify(info, null, 2)}</pre>
            `;
        }
        
        // Inicializa√ß√£o
        async function initialize() {
            try {
                updateStatus('üîÑ Inicializando Supabase...', 'info');
                
                // Verificar m√∫ltiplas formas do SDK estar dispon√≠vel
                if (typeof supabaseJs === 'undefined' && 
                    typeof supabase === 'undefined' && 
                    typeof window.supabase === 'undefined') {
                    throw new Error('Supabase SDK n√£o carregado');
                }
                
                // Usar qualquer vers√£o dispon√≠vel
                let clientCreator;
                if (typeof supabaseJs !== 'undefined') {
                    clientCreator = supabaseJs;
                } else if (typeof supabase !== 'undefined' && supabase.createClient) {
                    clientCreator = supabase;
                } else if (typeof window.supabase !== 'undefined') {
                    clientCreator = window.supabase;
                }
                
                supabase = clientCreator.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
                
                // Teste b√°sico de conectividade
                const { data, error } = await supabase.auth.getSession();
                
                if (error && error.message !== 'session_not_found') {
                    throw error;
                }
                
                updateStatus('‚úÖ Conectado com Supabase com sucesso!', 'success');
                
                updateDebug({
                    timestamp: new Date().toISOString(),
                    supabase_url: SUPABASE_URL,
                    sdk_version: 'v2 (latest)',
                    session_status: data?.session ? 'Logado' : 'N√£o logado',
                    connection_test: '‚úÖ Passou'
                });
                
            } catch (error) {
                console.error('‚ùå Erro na inicializa√ß√£o:', error);
                updateStatus(`‚ùå Erro: ${error.message}`, 'error');
                updateDebug({
                    error: error.message,
                    timestamp: new Date().toISOString(),
                    status: 'Falha na inicializa√ß√£o'
                });
            }
        }
        
        // Teste de login
        async function testLogin() {
            authResult.innerHTML = '<p>üîÑ Testando login...</p>';
            
            try {
                const { data, error } = await supabase.auth.signInWithPassword({
                    email: 'admin@italo.dev',
                    password: 'Italo2025Admin!'
                });
                
                if (error) {
                    authResult.innerHTML = `<div class="status-box status-error">‚ùå Erro no login: ${error.message}</div>`;
                    return;
                }
                
                authResult.innerHTML = `
                    <div class="status-box status-success">
                        ‚úÖ Login realizado com sucesso!<br>
                        <strong>Usu√°rio:</strong> ${data.user.email}<br>
                        <strong>ID:</strong> ${data.user.id}
                    </div>
                `;
                
            } catch (error) {
                authResult.innerHTML = `<div class="status-box status-error">‚ùå Erro interno: ${error.message}</div>`;
            }
        }
        
        // Teste de logout
        async function testLogout() {
            authResult.innerHTML = '<p>üîÑ Testando logout...</p>';
            
            try {
                const { error } = await supabase.auth.signOut();
                
                if (error) {
                    authResult.innerHTML = `<div class="status-box status-error">‚ùå Erro no logout: ${error.message}</div>`;
                    return;
                }
                
                authResult.innerHTML = `<div class="status-box status-success">‚úÖ Logout realizado com sucesso!</div>`;
                
            } catch (error) {
                authResult.innerHTML = `<div class="status-box status-error">‚ùå Erro interno: ${error.message}</div>`;
            }
        }
        
        // Teste de database
        async function testDatabase() {
            dbResult.innerHTML = '<p>üîÑ Testando conex√£o com database...</p>';
            
            try {
                // Tentar listar posts
                const { data: posts, error: postsError } = await supabase
                    .from('posts')
                    .select('id, title, created_at')
                    .limit(5);
                
                // Tentar listar projetos
                const { data: projects, error: projectsError } = await supabase
                    .from('projects')
                    .select('id, title, created_at')
                    .limit(5);
                
                let result = '<div class="status-box status-success">‚úÖ Conex√£o com database OK!</div>';
                
                result += `<h4>üìù Posts (${posts?.length || 0}):</h4>`;
                if (postsError) {
                    result += `<p style="color: orange;">‚ö†Ô∏è ${postsError.message}</p>`;
                } else if (posts?.length > 0) {
                    result += '<ul>';
                    posts.forEach(post => {
                        result += `<li>${post.title} (${new Date(post.created_at).toLocaleDateString()})</li>`;
                    });
                    result += '</ul>';
                } else {
                    result += '<p>Nenhum post encontrado</p>';
                }
                
                result += `<h4>üöÄ Projetos (${projects?.length || 0}):</h4>`;
                if (projectsError) {
                    result += `<p style="color: orange;">‚ö†Ô∏è ${projectsError.message}</p>`;
                } else if (projects?.length > 0) {
                    result += '<ul>';
                    projects.forEach(project => {
                        result += `<li>${project.title} (${new Date(project.created_at).toLocaleDateString()})</li>`;
                    });
                    result += '</ul>';
                } else {
                    result += '<p>Nenhum projeto encontrado</p>';
                }
                
                dbResult.innerHTML = result;
                
            } catch (error) {
                dbResult.innerHTML = `<div class="status-box status-error">‚ùå Erro no database: ${error.message}</div>`;
            }
        }
        
        // Carregar dados de teste
        async function loadTestData() {
            dbResult.innerHTML = '<p>üîÑ Criando dados de teste...</p>';
            
            try {
                // Criar post de teste
                const { data: postData, error: postError } = await supabase
                    .from('posts')
                    .insert([
                        {
                            title: 'Post de Teste - Supabase',
                            slug: 'post-de-teste-supabase',
                            excerpt: 'Este √© um post de teste criado automaticamente para verificar a funcionalidade do Supabase.',
                            content: '# Post de Teste\n\nEste post foi criado automaticamente pelo sistema de testes para verificar se o **Supabase** est√° funcionando corretamente.\n\n## Features testadas:\n- ‚úÖ Conex√£o com database\n- ‚úÖ Inser√ß√£o de dados\n- ‚úÖ Autentica√ß√£o',
                            tags: ['teste', 'supabase', 'desenvolvimento'],
                            status: 'published',
                            created_at: new Date().toISOString()
                        }
                    ])
                    .select();
                
                // Criar projeto de teste
                const { data: projectData, error: projectError } = await supabase
                    .from('projects')
                    .insert([
                        {
                            title: 'Projeto de Teste - Supabase',
                            description: 'Projeto de teste criado automaticamente para verificar a integra√ß√£o com Supabase.',
                            technologies: ['Astro', 'Supabase', 'JavaScript'],
                            demo_link: 'https://exemplo.com',
                            github_link: 'https://github.com/seu-dev-br/portifolio',
                            status: 'published',
                            created_at: new Date().toISOString()
                        }
                    ])
                    .select();
                
                let result = '<div class="status-box status-success">‚úÖ Dados de teste criados!</div>';
                
                if (postError) {
                    result += `<p style="color: orange;">‚ö†Ô∏è Erro no post: ${postError.message}</p>`;
                } else {
                    result += `<p>‚úÖ Post criado: ${postData[0]?.title}</p>`;
                }
                
                if (projectError) {
                    result += `<p style="color: orange;">‚ö†Ô∏è Erro no projeto: ${projectError.message}</p>`;
                } else {
                    result += `<p>‚úÖ Projeto criado: ${projectData[0]?.title}</p>`;
                }
                
                dbResult.innerHTML = result;
                
            } catch (error) {
                dbResult.innerHTML = `<div class="status-box status-error">‚ùå Erro ao criar dados: ${error.message}</div>`;
            }
        }
        
        // Inicializar quando a p√°gina carregar
        document.addEventListener('DOMContentLoaded', initialize);
    </script>
</body>
</html>
