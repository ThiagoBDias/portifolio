---
import { getRealtimeGitHubTechnologies } from '../lib/supabase.js';

// Carregar dados REAIS do GitHub API
console.log('üîÑ Carregando tecnologias em tempo real...');
const techData = await getRealtimeGitHubTechnologies();
const { techsByCategory, metadata } = techData;

console.log('üìä Dados de tecnologias carregados:', {
  source: metadata.source,
  totalTechs: metadata.totalTechs,
  categories: Object.keys(techsByCategory).filter((cat: string) => {
    const categoryData = techsByCategory[cat as keyof typeof techsByCategory];
    return categoryData && categoryData.length > 0;
  })
});

// Garantir que temos as categorias necess√°rias
const categories = {
  frontend: techsByCategory.frontend?.slice(0, 5) || [],
  backend: techsByCategory.backend?.slice(0, 5) || [],
  devops: techsByCategory.devops?.slice(0, 5) || []
};

// Fun√ß√£o para obter cor do n√≠vel de experi√™ncia
function getExperienceColor(experience: string): string {
  switch (experience) {
    case 'expert': return '#10b981'; // verde
    case 'advanced': return '#3b82f6'; // azul
    case 'intermediate': return '#f59e0b'; // amarelo
    case 'beginner': return '#ef4444'; // vermelho
    default: return '#6b7280'; // cinza
  }
}

// Fun√ß√£o para obter emoji do n√≠vel
function getExperienceEmoji(experience: string): string {
  switch (experience) {
    case 'expert': return '';
    case 'advanced': return '';
    case 'intermediate': return '';
    case 'beginner': return '';
    default: return '';
  }
}
---

<section class="py-20 bg-gradient-to-br from-slate-800 to-slate-900" id="technologies">
  <div class="max-w-6xl mx-auto px-4">
    <!-- Header -->
    <div class="text-center mb-16">
      <h2 class="text-4xl font-bold text-white mb-4">
        Tecnologias & Ferramentas
      </h2>
      <p class="text-gray-400 text-lg max-w-3xl mx-auto mb-6">
        Stack t√©cnico atualizado automaticamente baseado nos meus reposit√≥rios GitHub. 
        Percentuais calculados com base em linhas de c√≥digo e atividade recente.
      </p>
      
      <!-- Status da atualiza√ß√£o -->
      <div class="flex items-center justify-center gap-4 text-sm flex-wrap">
        <div class="flex items-center gap-2 bg-slate-800/50 px-3 py-1 rounded-full border border-slate-700">
          <div class={`w-2 h-2 rounded-full animate-pulse ${metadata.source === 'github_api_realtime' ? 'bg-green-400' : 'bg-yellow-400'}`}></div>
          <span class="text-gray-300">
            {metadata.source === 'github_api_realtime' ? 'Dados do GitHub API' : 'Modo fallback'}
          </span>
        </div>
        <div class="flex items-center gap-2 bg-slate-800/50 px-3 py-1 rounded-full border border-slate-700">
          <span class="text-gray-400">
            Atualizado: {new Date(metadata.lastUpdated).toLocaleTimeString('pt-BR')}
          </span>
        </div>
        <div class="flex items-center gap-2 bg-slate-800/50 px-3 py-1 rounded-full border border-slate-700">
          <span class="text-gray-400">
            {metadata.totalTechs} tecnologias
          </span>
        </div>
      </div>
    </div>

    <!-- Grid de Categorias -->
    <div class="grid lg:grid-cols-3 gap-8">
      <!-- Frontend -->
      <div class="bg-slate-900/50 border border-slate-700 rounded-xl p-6 backdrop-blur-sm hover:border-blue-500/50 transition-all duration-300 group">
        <div class="flex items-center gap-3 mb-6">
          <div class="w-12 h-12 bg-blue-500/20 rounded-lg flex items-center justify-center group-hover:bg-blue-500/30 transition-colors">
            <svg class="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-xl font-bold text-white">Frontend</h3>
            <p class="text-gray-400 text-sm">{categories.frontend.length} tecnologias</p>
          </div>
        </div>
        
        <div class="space-y-4">
          {categories.frontend.map((skill, index) => (
            <div class="group/skill">
              <div class="flex items-center justify-between mb-2">
                <div class="flex items-center gap-2">
                  <span class="text-lg">{skill.icon}</span>
                  <span class="text-white font-medium">{skill.name}</span>
                  {skill.experience && (
                    <span 
                      class="text-xs px-2 py-1 rounded-full text-white"
                      style={`background-color: ${getExperienceColor(skill.experience)}40; border: 1px solid ${getExperienceColor(skill.experience)}`}
                    >
                      {getExperienceEmoji(skill.experience)} {skill.experience}
                    </span>
                  )}
                </div>
                <span class="text-gray-400 text-sm font-mono">{skill.percentage}%</span>
              </div>
              <div class="w-full bg-slate-700/50 rounded-full h-2.5 overflow-hidden">
                <div 
                  class="h-full rounded-full transition-all duration-1000 ease-out skill-bar group-hover/skill:shadow-lg"
                  style={`
                    background: linear-gradient(90deg, ${skill.color}, ${skill.color}dd);
                    width: 0%;
                    box-shadow: 0 0 10px ${skill.color}40;
                  `}
                  data-percentage={skill.percentage}
                  data-delay={index * 150}
                  data-color={skill.color}
                ></div>
              </div>
              {skill.repos && (
                <div class="text-xs text-gray-500 mt-1">
                  üì¶ {skill.repos} {skill.repos === 1 ? 'reposit√≥rio' : 'reposit√≥rios'}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      <!-- Backend -->
      <div class="bg-slate-900/50 border border-slate-700 rounded-xl p-6 backdrop-blur-sm hover:border-orange-500/50 transition-all duration-300 group">
        <div class="flex items-center gap-3 mb-6">
          <div class="w-12 h-12 bg-orange-500/20 rounded-lg flex items-center justify-center group-hover:bg-orange-500/30 transition-colors">
            <svg class="w-6 h-6 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-xl font-bold text-white">Backend</h3>
            <p class="text-gray-400 text-sm">{categories.backend.length} tecnologias</p>
          </div>
        </div>
        
        <div class="space-y-4">
          {categories.backend.map((skill, index) => (
            <div class="group/skill">
              <div class="flex items-center justify-between mb-2">
                <div class="flex items-center gap-2">
                  <span class="text-lg">{skill.icon}</span>
                  <span class="text-white font-medium">{skill.name}</span>
                  {skill.experience && (
                    <span 
                      class="text-xs px-2 py-1 rounded-full text-white"
                      style={`background-color: ${getExperienceColor(skill.experience)}40; border: 1px solid ${getExperienceColor(skill.experience)}`}
                    >
                      {getExperienceEmoji(skill.experience)} {skill.experience}
                    </span>
                  )}
                </div>
                <span class="text-gray-400 text-sm font-mono">{skill.percentage}%</span>
              </div>
              <div class="w-full bg-slate-700/50 rounded-full h-2.5 overflow-hidden">
                <div 
                  class="h-full rounded-full transition-all duration-1000 ease-out skill-bar group-hover/skill:shadow-lg"
                  style={`
                    background: linear-gradient(90deg, ${skill.color}, ${skill.color}dd);
                    width: 0%;
                    box-shadow: 0 0 10px ${skill.color}40;
                  `}
                  data-percentage={skill.percentage}
                  data-delay={(index + 5) * 150}
                  data-color={skill.color}
                ></div>
              </div>
              {skill.repos && (
                <div class="text-xs text-gray-500 mt-1">
                  üì¶ {skill.repos} {skill.repos === 1 ? 'reposit√≥rio' : 'reposit√≥rios'}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>

      <!-- DevOps -->
      <div class="bg-slate-900/50 border border-slate-700 rounded-xl p-6 backdrop-blur-sm hover:border-yellow-500/50 transition-all duration-300 group">
        <div class="flex items-center gap-3 mb-6">
          <div class="w-12 h-12 bg-yellow-500/20 rounded-lg flex items-center justify-center group-hover:bg-yellow-500/30 transition-colors">
            <svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zM21 5a2 2 0 00-2-2h-4a2 2 0 00-2 2v12a4 4 0 004 4h4a2 2 0 002-2V5z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-xl font-bold text-white">DevOps & Tools</h3>
            <p class="text-gray-400 text-sm">{categories.devops.length} tecnologias</p>
          </div>
        </div>
        
        <div class="space-y-4">
          {categories.devops.map((skill, index) => (
            <div class="group/skill">
              <div class="flex items-center justify-between mb-2">
                <div class="flex items-center gap-2">
                  <span class="text-lg">{skill.icon}</span>
                  <span class="text-white font-medium">{skill.name}</span>
                  {skill.experience && (
                    <span 
                      class="text-xs px-2 py-1 rounded-full text-white"
                      style={`background-color: ${getExperienceColor(skill.experience)}40; border: 1px solid ${getExperienceColor(skill.experience)}`}
                    >
                      {getExperienceEmoji(skill.experience)} {skill.experience}
                    </span>
                  )}
                </div>
                <span class="text-gray-400 text-sm font-mono">{skill.percentage}%</span>
              </div>
              <div class="w-full bg-slate-700/50 rounded-full h-2.5 overflow-hidden">
                <div 
                  class="h-full rounded-full transition-all duration-1000 ease-out skill-bar group-hover/skill:shadow-lg"
                  style={`
                    background: linear-gradient(90deg, ${skill.color}, ${skill.color}dd);
                    width: 0%;
                    box-shadow: 0 0 10px ${skill.color}40;
                  `}
                  data-percentage={skill.percentage}
                  data-delay={(index + 10) * 150}
                  data-color={skill.color}
                ></div>
              </div>
              {skill.repos && (
                <div class="text-xs text-gray-500 mt-1">
                  üì¶ {skill.repos} {skill.repos === 1 ? 'reposit√≥rio' : 'reposit√≥rios'}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Bot√£o para atualizar manualmente -->
    <div class="text-center mt-12">
      <button 
        id="refresh-tech-data" 
        class="bg-gradient-to-r from-blue-500 to-orange-500 hover:from-blue-600 hover:to-orange-600 text-white px-6 py-3 rounded-lg font-medium transition-all duration-200 hover:shadow-lg hover:shadow-blue-500/25"
      >
        Atualizar Tecnologias
      </button>
    </div>
  </div>
</section>

<script>
  // Fun√ß√£o para animar as barras de progresso
  function animateSkillBars() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const skillBars = entry.target.querySelectorAll('.skill-bar');
          
          skillBars.forEach((bar) => {
            const htmlBar = bar as HTMLElement;
            const percentage = htmlBar.dataset.percentage;
            const delay = parseInt(htmlBar.dataset.delay || '0');
            const color = htmlBar.dataset.color;
            
            setTimeout(() => {
              htmlBar.style.width = `${percentage}%`;
              htmlBar.style.boxShadow = `0 0 15px ${color}60`;
            }, delay);
          });
          
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.2
    });

    const techSection = document.getElementById('technologies');
    if (techSection) {
      observer.observe(techSection);
    }
  }

  // Bot√£o de atualiza√ß√£o manual
  function setupRefreshButton() {
    const refreshBtn = document.getElementById('refresh-tech-data') as HTMLButtonElement;
    if (refreshBtn) {
      refreshBtn.addEventListener('click', async () => {
        refreshBtn.textContent = 'Atualizando...';
        refreshBtn.disabled = true;
        
        try {
          // Recarregar a p√°gina para pegar dados frescos
          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } catch (error) {
          refreshBtn.textContent = 'Erro na atualiza√ß√£o';
          setTimeout(() => {
            refreshBtn.textContent = 'Atualizar Tecnologias';
            refreshBtn.disabled = false;
          }, 2000);
        }
      });
    }
  }

  // Hover effects aprimorados
  function setupHoverEffects() {
    const skillCards = document.querySelectorAll('.group\\/skill');
    
    skillCards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        const skillBar = card.querySelector('.skill-bar') as HTMLElement;
        if (skillBar) {
          const color = skillBar.dataset.color;
          skillBar.style.filter = 'brightness(1.2) saturate(1.1)';
          skillBar.style.boxShadow = `0 0 20px ${color}80`;
          skillBar.style.transform = 'scaleY(1.1)';
        }
      });
      
      card.addEventListener('mouseleave', () => {
        const skillBar = card.querySelector('.skill-bar') as HTMLElement;
        if (skillBar) {
          const color = skillBar.dataset.color;
          skillBar.style.filter = 'brightness(1) saturate(1)';
          skillBar.style.boxShadow = `0 0 15px ${color}60`;
          skillBar.style.transform = 'scaleY(1)';
        }
      });
    });
  }

  // Inicializar quando o DOM estiver carregado
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      animateSkillBars();
      setupRefreshButton();
      setupHoverEffects();
    });
  } else {
    animateSkillBars();
    setupRefreshButton();
    setupHoverEffects();
  }
</script>

<style>
  .skill-bar {
    transition: all 0.3s ease;
    transform-origin: left center;
  }
  
  .group\/skill:hover .skill-bar {
    filter: brightness(1.2) saturate(1.1);
  }
</style>